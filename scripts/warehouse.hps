void OnStart()
{
	AddUseItemCallback("rope_on_crank", "rope", "Crank", "UseRopeOnCrank", true);

	AddEntityCollideCallback("Player", "FirstFloorArea", "OnColliderFirstFloor", true, 1);
	AddEntityCollideCallback("Player", "AreaHatchDoorClose", "OnColliderHatchDoorFall", true, 1);

	if(!HasItem("Lantern")) GiveItemFromFile("Lantern", "lantern.ent");
	if(!HasItem("Container")) GiveItemFromFile("Container", "chemical_container.ent");
	if(!HasItem("HammerChipper")) GiveItem("HammerChipper", "Puzzle", "stone_hammer_chipper", "stone_hammer_chipper.tga", 0);

	PlayMusic("06_amb.ogg", true, 0.8f, 0, 0, true);
	SetMapDisplayNameEntry("Warehouse");
	AutoSave();
}

void OnLeave()
{
	SetGlobalVarInt("ForestSubChapterComplete", 1);
	SetupLoadScreen("Loading", "OnLeaveWarehouse", 0, "forest.jpg");
}

void OnPickCrowbar(string &in entityName, string &in type)
{
	AddEntityCollideCallback("Player", "AreaLivingStatue", "OnColliderLivingStatue", true, 1);

	SetEntityActive("living_statue_8", true);
	SetEntityActive("living_statue_9", true);

	for(int i=0;i<8;i++)
		AddTimer(i + "", 1.75f * i, "TimerHorrorWakeUp");

	for(int i=1;i<=3;i++)
		AddTimer("react_pant.snt", 3 * i + 3, "TimerScare");
}

void UseRopeOnCrank(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	SetWheelAngle(asEntity, 0.0f, false);SetPropActiveAndFade("fleshy_statue_8", false, 3.0f);
	SetEntityActive("crank_rope", true);
	PlaySoundAtEntity("RopeStrain", "06_rope_strain.snt", asEntity, 0, false);
	for(int i=0; i<3; i++)
		InteractConnectPropWithRope("rope_connection_"+i, asEntity, "RopeArea_"+i, false, 1.0f, 1.0f, 1.0f, false, 0);

	CompleteQuest(asEntity, asEntity);
}

void OnColliderFirstFloor(string &in asParent, string &in asChild, int alState)
{
	CompleteQuest("LargeDoor", "LargeDoor");
	SetEntityInteractionDisabled("LargeDoor", true);
	GiveSanityBoostSmall();
}

void OnColliderHatchDoorFall(string &in asParent, string &in asChild, int alState)
{
	SetWheelAngle("Crank", 0.0f, false);
	PlaySoundAtEntity("DoorBoom", "break_wood.snt", "LargeDoor", 0, false);
	CreateParticleSystemAtEntity("DirtyImpact", "ps_break_mansionbase_wall.ps", "LargeDoor", false);
	StartPlayerLookAt("LargeDoor", 2.5f, 3.0f, "");

	AddTimer("react_pant.snt", 0.35f, "TimerScare");
	AddTimer("StopLookAtCloseDoor", 1.25f, "TimerLookComplete");
}

void OnColliderLivingStatue(string &in asParent, string &in asChild, int alState)
{
	for(int i=8;i<10;i++)
	{
		SetPropActiveAndFade("living_statue_"+i, false, 0.05f);
		SetPropActiveAndFade("fleshy_statue_"+i,  true, 0.05f);
		CreateParticleSystemAtEntity("StatueSwapEffectBlood", "blood.ps", "fleshy_statue_"+i, false);
		CreateParticleSystemAtEntity("StatueSwapEffectBreak", "ps_break_mansionbase_wall.ps", "fleshy_statue_"+i, false);
	}

	PlaySoundAtEntity("StatueLaugh", "21_intro_scream.snt", "level_exit", 0, false);
	StartPlayerLookAt("FleshyStatue", 2.5f, 3.0f, "");
	GiveSanityDamage(15.0f, true);

	AddTimer("react_scare.snt", 0.2f, "TimerScare");
	AddTimer("StopLookAtLivingStatue", 0.5f, "TimerLookComplete");
	AddTimer("SwapStatue", 1.25f, "TimerReleaseStatues");
}

void TimerHorrorWakeUp(string &in asTimer)
{
	SetPropActiveAndFade("living_statue_"+asTimer, true, 3.0f);
	PlaySoundAtEntity("statue_cry", "amb_idle.snt", "living_statue_"+asTimer, 0.0f, false);
}

void TimerReleaseStatues(string &in soundFile)
{
	for(int i=0;i<8;i++)
		SetPropActiveAndFade("living_statue_"+i, false, 3.0f);

	for(int i=8;i<10;i++)
		SetPropActiveAndFade("fleshy_statue_9", false, 3.0f);

	AddTimer("unlock_the_door", 3.0f, "TimerUnlockTheDoor");
}

void TimerUnlockTheDoor(string &in asTimer)
{
	SetLevelDoorLocked("level_exit", false);
}

void OnInteractDoor(string &in door)
{
	if(!QuestIsCompleted(door))
	{
		SetMessage("Hints", door, 5.0f);
		AddQuest(door, door);
	}
}

void TimerLookComplete(string &in asTimer)
{
	StopPlayerLookAt();
}

void TimerScare(string &in soundFile)
{
	PlayGuiSound(soundFile, 1.0f);
	ChangePlayerStateToNormal();
}
