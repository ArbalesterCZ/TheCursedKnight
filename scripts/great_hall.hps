#include "_use_key_on_door.hps"
#include "_door_interact.hps"
#include "_look_complete.hps"
#include "_scare.hps"
#include "_fade_out.hps"

void OnStart()
{
	AddUseItemCallback("", "Key", "Door", "UseKeyOnDoorSpecial", true);
	AddUseItemCallback("", "Key", "SmallDoor", "UseKeyOnDoorSpecial", true);
	AddUseItemCallback("", "Key_store", "Door_store", "UseKeyOnDoor", true);
	AddUseItemCallback("", "Key_library", "Door_library", "UseKeyOnDoor", true);

	AddEntityCollideCallback("HandleStore", "LeverConnect", "AttachLever", true, 1);

	SetPlayerActive(false);
	SetPlayerLampOil(0);
	GiveSanityDamage(110.0f, false);
	SetLightVisible("BoxLight", false);
	SetMessage("Hints", "Chapter_1", 5.0f);
	CheckPoint("Music", "StartArea", "OnDeathMusic", "", "");
	SetMapDisplayNameEntry("GreatHall");

	FadeOut(0.0f);
	FadeIn(3.0f);

	AddTimer("3.0f", 5.0f, "TimerFadeOut");
	AddTimer("3.0f", 8.0f, "TimerDreamStart");
}

void OnLeave()
{
	StopMusic(0.0f, 5);
	RemoveItem("Key");
	CompleteQuest("Exit", "Exit");
	CompleteQuest("SmallDoor", "SmallDoor");
	SetupLoadScreen("Loading", "Library", 0, "library.jpg");
}

void UseKeyOnDoorSpecial(string &in asItem, string &in asEntity)
{
	SetSwingDoorLocked(asEntity, false, true);
	PlaySoundAtEntity("", "unlock_door.snt", asEntity, 0, false);
	if(!GetSwingDoorLocked("Door") && !GetSwingDoorLocked("SmallDoor")) RemoveItem(asItem);
	if(asEntity == "SmallDoor") SetEntityActive("Oil", true);
	CompleteQuest(asEntity, asEntity);
}

void AttachLever(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asParent, false);
	SetEntityActive("Sign_LeverConnect", false);
	SetEntityActive("MountStore", false);
	SetEntityActive("AttachLever", true);
	PlaySoundAtEntity("", "pickaxe_charge.snt", "AttachLever", 0, false);
	GiveSanityBoostSmall();
}

void OnDestroyVase(string &in asEntity, string &in type)
{
	GiveSanityDamage(20.0f, true);
	StartPlayerLookAt(asEntity, 5.0f, 5.0f, "");
	AddTimer("hurt_pant.snt", 0.5f, "TimerScare");
	AddTimer("LookComplete", 1.0f, "TimerLookComplete");
}

void PickKey(string &in asEntity, string &in type)
{
	GiveSanityBoostSmall();
	AddQuest("Exit", "Exit");
	AddTimer("Exit", 3.0f, "TimerShowMessage");

	CompleteQuest("Barricade", "Barricade");
	CheckPoint("AfterPickKeyToLibrary", "KitchenArea", "OnDeathMusic", "", "");
}

void PickKeyStore(string &in asEntity, string &in type)
{
	SetPropStaticPhysics("BrokenVase", false);
}

void TimerShowMessage(string &in asMessage)
{
	SetMessage("Hints", asMessage, 5.0f);
}

void TimerDreamStart(string &in asTimer)
{
	FadeIn(StringToFloat(asTimer));
	SetFogActive(true);
	SetEntityActive("GruntDream", true);
	AddEnemyPatrolNode("GruntDream", "PathDream_1", 0.001f, "");
	AddEnemyPatrolNode("GruntDream", "PathDream_3", 5.0f, "");
	SetMessage("Hints", "Dream", 3.0f);
	AddTimer("2.5f", 3.0f, "TimerFadeOut");
	AddTimer("2.5f", 5.5f, "TimerDreamShift");
}

void TimerDreamShift(string &in asTimer)
{
	FadeIn(StringToFloat(asTimer));
	TeleportEnemyToNode("GruntDream", "PathDream_2", true);
	AddTimer("2.5f", 3.5f, "TimerFadeOut");
	AddTimer("3.5f", 6.0f, "TimerDreamEnd");
}

void TimerDreamEnd(string &in asTimer)
{
	float fade = StringToFloat(asTimer);
	FadeIn(fade);
	SetFogActive(false);
	SetEntityActive("GruntDream", false);
	StopMusic(fade, 5);
	AddTimer("WakeUp", fade, "TimerWakeUp");
}

void TimerWakeUp(string &in asTimer)
{
	SetPlayerSanity(100.0f);
	SetPlayerActive(true);
	PlayMusic("amb_extra01.ogg", true, 0.8f, 5.0f, 0, true);
	SetLightVisible("BoxLight", true);
	SetMessage("Hints", "DreamEnd", 5.0f);	
}

void OnLeverChangeState(string &in asEntity, int LeverState)
{
	if(LeverState == 1) 
	{
		StartScreenShake(0.001f, 0.5f, 0.5f, 0.5f);
		SetLeverStuckState(asEntity, LeverState, true);

		KitchenBarricade(false);

		GiveSanityDamage(40.0f, true);

		AddTimer("Lunch", 2.0f, "TimerShowMessage");
		AddTimer("react_pant.snt", 2.0f, "TimerScare");

		SetEntityActive("Grunt", true);

		for(int i=1;i<=5;i++) SetEntityActive("Corpse_"+i, true);
		for(int i=1;i<=7;i++) AddEnemyPatrolNode("Grunt", "Path"+i, 0.001f, "");

		AddEnemyPatrolNode("Grunt", "Path8", 2.5f, "");

		AddEnemyPatrolNode("Grunt", "Path9", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path10", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path9", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path7", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path6", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path5", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path11", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path12", 0.001f, "");

		AddEnemyPatrolNode("Grunt", "Path13", 2.5f, "");

		AddEnemyPatrolNode("Grunt", "Path12", 0.001f, "");
		AddEnemyPatrolNode("Grunt", "Path2", 0.001f, "");

		CheckPoint("BehindChefAttack", "LeverArea", "OnDeathByChef", "Die", "FirstChefMeet");
    }
}

void OnDeathMusic(string &in asName, int alCount)
{
	PlayMusic("amb_extra01.ogg", true, 0.8f, 5.0f, 0, true);
}

void OnDeathByChef(string &in asName, int alCount)
{
	SetLeverStuckState("AttachLever", 0, false);
	ResetProp("AttachLever");

	for(int i=1;i<=5;i++)
	{
		SetEntityActive("Corpse_"+i, false);
		ResetProp("Corpse_"+i);
	}

	KitchenBarricade(true);
	AddPlayerSanity(40.0f);
	PlayMusic("amb_extra01.ogg", true, 0.8f, 5.0f, 0, true);
}

void KitchenBarricade(bool build)
{
	SetEntityActive("Barricade", build);
	SetEntityActive("Barricade_1", build);
	SetEntityActive("Barricade_2", build);
	SetEntityActive("BarricadeBroken_1", !build);
	SetEntityActive("BarricadeBroken_2", !build);
}
